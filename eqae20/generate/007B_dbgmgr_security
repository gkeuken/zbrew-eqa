#!/bin/sh
#set -x

if ! [ $# -eq 2 ]; then
	echo "Syntax: dbgmgr_security ENABLE|DISABLE <output-script>" >&2
	exit 8
fi
verb="$1"
script="$2"

zbrew=`whence zbrew`
zbrewdir=${zbrew%/*} 
zbrewroot=${zbrewdir%/*}

cat << EOF >${script}
	#!/bin/sh
	export PATH=${zbrewdir}:\$PATH
	. zbrewsetswenv eqae20
	. \$ZBREW_WORKROOT/zbrew-eqa/eqafuncs
	export PRODUCT_CODE="$PRODUCT_CODE"

	if ! \`supportsDebugManager "\$PRODUCT_CODE"\`; then
		exit 0
	fi
	if \`undefinedProperty "\${EQAE20_DBGMGR_CLIENT}"\` ; then
		echo "dbgmgr_security: EQAE20_DBGMGR_CLIENT must be specified" >&2
		exit 4
	fi
	if \`undefinedProperty "\${EQAE20_DBGMGR_HOST}"\` ; then
		echo "dbgmgr_security: EQAE20_DBGMGR_HOST must be specified" >&2
		exit 4
	fi

	ttlsrule="
TTLSRule zOS_Debugger_Debug_Manager  
{
  LocalPortRange      \${EQAE20_DBGMGR_CLIENT}
  Direction           Inbound
  TTLSGroupActionRef  act_zOS_Debugger_Debug_Manager
}
TTLSEnvironmentAction  act_zOS_Debugger_Debug_Manager
{
  HandshakeRole Server
  TTLSKeyRingParms
  {
    Keyring dbgmgr_security.racf # Keyring must be owned by the Debug Manager
  }
  TTLSEnvironmentAdvancedParms
  {
    TLSV1.2 On
    SSLV3   Off
  }
}
TTLSRule zOS_Debugger_Debug_Probe-Client
{
  RemotePortRange \${EQAE20_DBGMGR_REMOTE_PORT_RANGE}
  Direction Outbound
  TTLSGroupActionRef grp_Production
  TTLSEnvironmentActionRef act_zOS_Debug_Probe-Client
}
TTLSEnvironmentAction act_zOS_Debug_Probe-Client
{
  HandshakeRole Client
  TTLSKeyRingParms
  {
    Keyring *AUTH*/*
  }
  TTLSEnvironmentAdvancedParms
  {
    TLSV1.2 On
  }
}
TTLSGroupAction grp_Production
{
  TTLSEnabled On
  TTLSGroupAdvancedParmsRef TLSv1.2
  Trace       3
}
TTLSGroupAdvancedParms TLSv1.2
{
  Envfile /etc/pagent.ttls.TLSv1.2.env
}"

	cat "${ttlsrule}"

	ttlsresult=\`opercmd 'd tcpip,,netstat,config' 2>/dev/null | awk ' /TTLS:/ { print \$2; }'\`
	pagentresult=\`opercmd 'd tcpip,,netstat,config' 2>/dev/null | awk ' /PROCNAME: PAGENT/ { print; }'\`

	if ! [ "\${ttlsresult}" = 'YES' ] ; then
		ttlsentry="TCPCONFIG TTLS           ; Required for AT-TLS
"
	else
		ttlsentry=''
	fi
	if [ "\${pagentresult}" = '' ]; then
		pagententry="AUTOLOG
  PAGENT                 ; POLICY AGENT, required for AT-TLS
ENDAUTOLOG"
	else
		pagententry=''
	fi
	if [ "\${ttlsentry}" != '' ] || [ "\${pagententry}" != '' ]; then
		text="\${ttlsentry}\${pagententry}"	
		profhdr="; EQAE20 start ;"
		profftr="; EQAE20 end ;"

		registrar "EQAE20" "${verb}" "ZBREW.TCPIP" "PROFILE" "\$profhdr" "\$profftr" ";" ";" "\${text}"
		rc=\$?
		if [ \$rc -gt 0 ]; then
			exit \$rc
		fi
	fi
EOF

if [ $? -gt 0 ]; then
	echo "Unable to create EQAE20 Update script: ${script}." >&2
	exit 16
fi

chmod u+x "${script}"

if [ "${verb}" = "ENABLE" ]; then
	cat << EOF >>${script}
	procwhence PAGENT >/dev/null 2>&1
	if [ $? -gt 0 ]; then
		pagenttask="//PAGENT PROC PRM='-L SYSLOGD' * '' or '-L SYSLOGD'
//*
//* TCP/IP POLICY AGENT
//*
//*
//*
//* default log size: 300,3 (3x 300KB files) (PAGENT_LOG_FILE_CONTROL)
//*
//PAGENT EXEC PGM=PAGENT,REGION=0M,TIME=NOLIMIT,
// PARM='ENVAR(\\\"TZ=EST5DST\\\")/&PRM'
//SYSPRINT DD SYSOUT=*
//SYSOUT DD SYSOUT=*
//*"
		procregistrar "EQAE20" "${verb}" "PAGENT" "\${pagenttask}"	
		opercmd "START PAGENT"
	fi
	exit \$?
EOF
else
	cat << EOF >>${script}
	pagentdataset=\`procwhence PAGENT\` 2>&1
	if [ "\$pagentdataset" = "\${ZBREW_TARGET}.PROCLIB" ]; then
		opercmd "STOP PAGENT"
		procregistrar "EQAE20" "${verb}" "PAGENT" "\${pagenttask}"	
	fi
	exit \$?
EOF
fi

exit 0
